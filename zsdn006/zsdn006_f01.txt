*&---------------------------------------------------------------------*
*&  包含                ZSDN006_F01
*&---------------------------------------------------------------------*

FORM sub_get_data.

  TYPES: BEGIN OF ty_vbap,
           auart  TYPE vbak-auart,
           waerk  TYPE vbak-waerk,
           vkorg  TYPE vbak-vkorg,
           vtweg  TYPE vbak-vtweg,
           vkgrp  TYPE vbak-vkgrp,
           vkbur  TYPE vbak-vkbur,
           knumv  TYPE vbak-knumv,
           bname  TYPE vbak-bname,
           kunnr  TYPE vbak-kunnr,
           vbeln  TYPE vbap-vbeln,
           posnr  TYPE vbap-posnr,
           matnr  TYPE vbap-matnr,
           arktx  TYPE vbap-arktx,
           kwmeng TYPE vbap-kwmeng,
           vrkme  TYPE vbap-vrkme,
           umvkz  TYPE vbap-umvkz,
           umvkn  TYPE vbap-umvkn,
           werks  TYPE vbap-werks,
           erdat  TYPE vbap-erdat,
           ernam  TYPE vbap-ernam,
           abgru  TYPE vbap-abgru,
           pspnr  TYPE vbap-ps_psp_pnr,
           lfsta  TYPE vbup-lfsta,
           edatu  TYPE vbep-edatu,
           bukrs  TYPE tvko-bukrs,
           budat  TYPE mkpf-budat,
           bstkd  TYPE vbkd-bstkd,   "add by hanjiahao on 2017.06.26
           kunnr1 TYPE vbpa-kunnr,
           fksta  TYPE vbup-fksta,
           del    TYPE c,
         END OF ty_vbap.

  TYPES: BEGIN OF ty_vbfa,
           vbelv   TYPE vbfa-vbelv,
           posnv   TYPE vbfa-posnv,
           vbeln   TYPE vbfa-vbeln,
           posnn   TYPE vbfa-posnn,
           vbtyp_n TYPE vbfa-vbtyp_n,
           rfmng   TYPE vbfa-rfmng,
           rfwrt   TYPE vbfa-rfwrt,
           erdat   TYPE vbfa-erdat,
           mjahr   TYPE vbfa-mjahr,
           wbsta   TYPE vbup-wbsta,
           fksta   TYPE vbup-fksta,
           wadat   TYPE likp-wadat_ist,
         END OF ty_vbfa.

  TYPES: BEGIN OF ty_konv,
           knumv TYPE konv-knumv,
           kposn TYPE konv-kposn,
           kschl TYPE konv-kschl,
           kbetr TYPE konv-kbetr,
           waers TYPE konv-waers,
           kpein TYPE konv-kpein,
           kmein TYPE konv-kmein,
           kwert TYPE konv-kwert,
         END OF   ty_konv.

  TYPES: BEGIN OF ty_kna1,
           kunnr TYPE kna1-kunnr,
           name1 TYPE kna1-name1,
         END OF ty_kna1.

  TYPES: BEGIN OF ty_vbpa,
           vbeln TYPE vbpa-vbeln,
           pernr TYPE vbpa-pernr,
         END OF ty_vbpa.

  TYPES: BEGIN OF ty_mkpf,
           mblnr TYPE mkpf-mblnr,
           mjahr TYPE mkpf-mjahr,
           budat TYPE mkpf-budat,
         END OF ty_mkpf.

  DATA: ls_vbap     TYPE ty_vbap,
        lt_vbap     TYPE TABLE OF ty_vbap,
        lt_vbap_o   TYPE TABLE OF ty_vbap,
        ls_vbfa     TYPE ty_vbfa,
        lt_vbfa     TYPE TABLE OF ty_vbfa,
        lt_vbfa_o   TYPE TABLE OF ty_vbfa,
        lt_vbfa_r   TYPE TABLE OF ty_vbfa,
        ls_konv     TYPE ty_konv,
        lt_konv     TYPE TABLE OF ty_konv,
        ls_kna1     TYPE ty_kna1,
        lt_kna1     TYPE TABLE OF ty_kna1,
        ls_vbpa     TYPE ty_vbpa,
        lt_vbpa     TYPE TABLE OF ty_vbpa,
        ls_mkpf     TYPE ty_mkpf,
        lt_mkpf     TYPE TABLE OF ty_mkpf,
        lt_mkpf_o   TYPE TABLE OF ty_mkpf,
        lv_erts(15) TYPE c.

  FIELD-SYMBOLS: <fs_vbap> TYPE ty_vbap,
                 <fs_vbfa> TYPE ty_vbfa.

  REFRESH gt_datalv.

  "获取销售单及其交货的状态
  SELECT vbak~auart   "销售凭证类型
         vbak~waerk   "SD 凭证货币
         vbak~vkorg   "销售组织
         vbak~vtweg   "分销渠道
         vbak~vkgrp   "销售组
         vbak~vkbur    "销售部门
         vbak~knumv    "单据条件数
         vbak~bname    "合同号
         vbak~kunnr    "售达方
         vbap~vbeln    "销售凭证
         vbap~posnr    "销售凭证项目
         vbap~matnr    "物料号
         vbap~arktx    "销售订单项目短文本
         vbap~kwmeng   "订单数量
         vbap~vrkme    "销售单位
         vbap~umvkz    "销售数量
         vbap~umvkn
         vbap~werks
         vbap~erdat
         vbap~ernam
         vbap~abgru
         vbap~ps_psp_pnr AS pspnr
         vbup~lfsta
         vbup~fksaa AS fksta
         vbep~edatu
         tvko~bukrs
         vbkd~bstkd  "销售订单号码
         vbpa~kunnr AS kunnr1
       INTO CORRESPONDING FIELDS OF TABLE lt_vbap
       FROM  vbak
       JOIN  tvko
       ON    vbak~vkorg = tvko~vkorg
       JOIN  vbap
       ON    vbak~vbeln = vbap~vbeln
       JOIN  vbup
       ON    vbap~vbeln = vbup~vbeln
       AND   vbap~posnr = vbup~posnr
       JOIN  vbep
       ON    vbap~vbeln = vbep~vbeln
       AND   vbap~posnr = vbep~posnr
"add by hanjiahao on 2017.06.26
       JOIN  vbkd
       ON    vbap~vbeln = vbkd~vbeln
       AND   vbap~posnr = vbkd~posnr
       JOIN  vbpa
       ON    vbap~vbeln = vbpa~vbeln
       AND   vbpa~parvw = 'WE'
******end by hanjiahao
       WHERE vbak~vbeln IN s_vbeln
       AND   vbak~erdat IN s_erdat
       AND   vbak~auart IN s_auart
       AND   vbak~auart NOT IN ('CR',  'POR','TSO','ZOR',
                                'ZPOR','ZZP','ZZR')
       AND   vbak~vkorg IN s_vkorg
       AND   vbak~vtweg IN s_vtweg
       AND   vbak~bname IN s_bname
       AND   tvko~bukrs IN s_bukrs
       AND   vbak~kunnr IN s_kunnr
*       AND   vbpa~parvw = 'SH'
       AND   vbpa~kunnr IN s_sunnr
       AND   vbep~wmeng > 0.

  SORT lt_vbap BY vbeln posnr edatu.
  DELETE ADJACENT DUPLICATES FROM lt_vbap COMPARING vbeln posnr.

  "如果只是选择未清交货
  IF rd_vl = 'X'.
    DELETE lt_vbap WHERE lfsta <> 'A' AND lfsta <> 'B'.
  ELSE.
  ENDIF.

  "如果选择了实际过账日期
  IF s_budat IS NOT INITIAL.
    DELETE lt_vbap WHERE lfsta = 'A'.
  ELSE.
  ENDIF.

  CHECK lt_vbap[] IS NOT INITIAL.

  "获取客户名称
  lt_vbap_o[] = lt_vbap[].
  SORT lt_vbap_o BY kunnr.
  DELETE ADJACENT DUPLICATES FROM lt_vbap_o COMPARING kunnr.
  SELECT kunnr
         name1
    INTO CORRESPONDING FIELDS OF TABLE lt_kna1
    FROM kna1
    FOR ALL ENTRIES IN lt_vbap_o
    WHERE kunnr = lt_vbap_o-kunnr
      OR  kunnr = lt_vbap_o-kunnr1.

  REFRESH lt_vbap_o.

  "获取销售经理工号
  lt_vbap_o[] = lt_vbap[].
  SORT lt_vbap_o BY vbeln.
  DELETE ADJACENT DUPLICATES FROM lt_vbap_o COMPARING vbeln.
  SELECT vbeln
         pernr
    INTO CORRESPONDING FIELDS OF TABLE lt_vbpa
    FROM vbpa
    FOR ALL ENTRIES IN lt_vbap_o
    WHERE vbeln = lt_vbap_o-vbeln
    AND   posnr = ''
    AND   parvw = 'VE'.


  "获取交货单据
  SORT lt_vbap BY vbeln posnr.
  SELECT vbfa~vbelv
         vbfa~posnv
         vbfa~vbeln
         vbfa~posnn
         vbfa~vbtyp_n
         vbfa~rfmng
         vbfa~rfwrt
         vbfa~mjahr
         vbup~wbsta
         vbup~fksta
         likp~wadat_ist AS wadat
    INTO CORRESPONDING FIELDS OF TABLE lt_vbfa
    FROM vbfa
    LEFT JOIN vbup
    ON  vbfa~vbeln = vbup~vbeln
    AND vbfa~posnn = vbup~posnr
    LEFT JOIN likp
    ON  vbfa~vbeln = likp~vbeln
    FOR ALL ENTRIES IN lt_vbap
    WHERE vbfa~vbelv   = lt_vbap-vbeln
    AND   vbfa~posnv   = lt_vbap-posnr
    AND   vbfa~vbtyp_n IN ('J', 'T')
    AND   vbfa~vbtyp_v <> ''
    AND   vbfa~stufe   =  ''.


  "如果选择了实际过账日期
  IF s_budat IS NOT INITIAL.
    DELETE lt_vbfa WHERE wbsta = 'A'.
    CHECK lt_vbfa[] IS NOT INITIAL.

    REFRESH lt_vbfa_o.
    lt_vbfa_o[] = lt_vbfa[].
    DELETE lt_vbfa_o WHERE wadat NOT IN s_budat.
    CHECK lt_vbfa_o[] IS NOT INITIAL.

  ELSE.
  ENDIF.


  "赋值最大的交货日期及删除不在交货日期条件内的记录
  lt_vbfa_r[] = lt_vbfa[].
  DELETE lt_vbfa_r WHERE wbsta = 'A'.

  SORT lt_vbfa_r BY vbelv posnv wadat DESCENDING.
  SORT lt_vbfa_o BY vbelv posnv.

  LOOP AT lt_vbap ASSIGNING <fs_vbap>.

    IF s_budat IS NOT INITIAL.
      CLEAR ls_vbfa.
      READ TABLE lt_vbfa_o INTO ls_vbfa WITH KEY vbelv = <fs_vbap>-vbeln
                                                 posnv = <fs_vbap>-posnr BINARY SEARCH.
      IF sy-subrc <> 0.
        <fs_vbap>-del = 'X'.
      ENDIF.
    ELSE.
    ENDIF.

    IF <fs_vbap>-del <> 'X'.
      CLEAR ls_vbfa.
      READ TABLE lt_vbfa_r INTO ls_vbfa WITH KEY vbelv = <fs_vbap>-vbeln
                                                 posnv = <fs_vbap>-posnr BINARY SEARCH.
      <fs_vbap>-budat = ls_vbfa-wadat.
    ELSE.
    ENDIF.
  ENDLOOP.

  DELETE lt_vbap WHERE del = 'X'.


  "获取交货单过账凭证及发票
  SORT lt_vbfa BY vbeln posnn.

  REFRESH lt_vbfa_o.

  IF lt_vbfa[] IS NOT INITIAL.

    "获取交货单的发票和过账
    SELECT vbelv
           posnv
           vbeln
           posnn
           vbtyp_n
           rfmng
           rfwrt
           mjahr
      INTO CORRESPONDING FIELDS OF TABLE lt_vbfa_o
      FROM vbfa
      FOR ALL ENTRIES IN lt_vbfa
      WHERE vbelv   = lt_vbfa-vbeln
      AND   posnv   = lt_vbfa-posnn
      AND   vbtyp_n IN ('M','N','R','h')
      AND   vbtyp_v <> ''
      AND   stufe   =  ''.

    LOOP AT lt_vbfa_o ASSIGNING <fs_vbfa>.

      READ TABLE lt_vbfa INTO ls_vbfa WITH KEY vbeln = <fs_vbfa>-vbelv
                                               posnn = <fs_vbfa>-posnv BINARY SEARCH.

      <fs_vbfa>-vbelv = ls_vbfa-vbelv.
      <fs_vbfa>-posnv = ls_vbfa-posnv.
    ENDLOOP.

    APPEND LINES OF lt_vbfa_o TO lt_vbfa.

  ELSE.
  ENDIF.

  "如果是SO开票，获取SO对应的发票
  SORT lt_vbap BY vbeln posnr.
  SELECT vbfa~vbelv
         vbfa~posnv
         vbfa~vbeln
         vbfa~posnn
         vbfa~vbtyp_n
         vbfa~rfmng
         vbfa~rfwrt
         vbfa~mjahr
         vbup~wbsta
         vbup~fksta
         likp~wadat_ist AS wadat
    APPENDING CORRESPONDING FIELDS OF TABLE lt_vbfa
    FROM vbfa
    LEFT JOIN vbup
    ON  vbfa~vbeln = vbup~vbeln
    AND vbfa~posnn = vbup~posnr
    LEFT JOIN likp
    ON  vbfa~vbeln = likp~vbeln
    FOR ALL ENTRIES IN lt_vbap
    WHERE vbfa~vbelv   = lt_vbap-vbeln
    AND   vbfa~posnv   = lt_vbap-posnr
    AND   vbfa~vbtyp_n IN ('M','N','O', 'S')
    AND   vbfa~vbtyp_v <> ''
    AND   vbfa~stufe   =  ''.

  "根据交货单来确定销售的发票状态，如果是未开发票或者部分开发票，就给他一个为开发票状态
  REFRESH lt_vbfa_o.
  lt_vbfa_o[] = lt_vbfa[].
  DELETE lt_vbfa_o WHERE vbtyp_n <> 'J' AND vbtyp_n <> 'T'.
  SORT lt_vbfa_o BY vbelv posnv fksta.

  IF lt_vbfa_o[] IS NOT INITIAL.
    LOOP AT lt_vbap ASSIGNING <fs_vbap>.
      READ TABLE lt_vbfa_o INTO ls_vbfa WITH KEY vbelv = <fs_vbap>-vbeln
                                                 posnv = <fs_vbap>-posnr
                                                 fksta = 'B' BINARY SEARCH.
      IF sy-subrc <> 0.
        CLEAR ls_vbfa.
        READ TABLE lt_vbfa_o INTO ls_vbfa WITH KEY vbelv = <fs_vbap>-vbeln
                                                   posnv = <fs_vbap>-posnr
                                                   fksta = 'A' BINARY SEARCH.
        <fs_vbap>-fksta = ls_vbfa-fksta.
      ENDIF.
    ENDLOOP.
  ELSE.
  ENDIF.


  "如果选择未清发票
  IF rd_vf = 'X' .
    DELETE lt_vbap WHERE fksta <> 'A' AND fksta <> 'B'.
  ELSE.
  ENDIF.

  IF rd_lf = 'X'.
    DELETE lt_vbap WHERE lfsta <> 'A' AND lfsta <> 'B' AND
                         fksta <> 'A' AND fksta <> 'B'.
  ELSE.
  ENDIF.

  CHECK lt_vbap IS NOT INITIAL.

  "获取价格单位
  SORT lt_vbap BY knumv posnr.
  SELECT knumv
         kposn
         kschl
         kbetr
         waers
         kpein
         kmein
         kwert
    INTO CORRESPONDING FIELDS OF TABLE lt_konv
    FROM konv
    FOR ALL ENTRIES IN lt_vbap
    WHERE knumv = lt_vbap-knumv
    AND   kposn = lt_vbap-posnr
    AND   kschl IN ('PR01','PR00','MWSI').


  "汇总销售单的发票数量及未过账的交货单数量，过账的交货单数量
  SORT lt_vbap BY vbeln posnr.
  SORT lt_vbfa BY vbelv posnv.
  SORT lt_konv BY knumv kposn kschl.
  SORT lt_kna1 BY kunnr.
  SORT lt_vbpa BY vbeln.

  LOOP AT lt_vbap INTO ls_vbap.

    CLEAR gs_datalv.

    MOVE-CORRESPONDING ls_vbap TO gs_datalv.

    CLEAR ls_konv.
    READ TABLE lt_konv INTO ls_konv WITH KEY knumv = ls_vbap-knumv
                                             kposn = ls_vbap-posnr
                                             kschl = 'PR01' BINARY SEARCH.
    IF sy-subrc <> 0.
      READ TABLE lt_konv INTO ls_konv WITH KEY knumv = ls_vbap-knumv
                                               kposn = ls_vbap-posnr
                                               kschl = 'PR00' BINARY SEARCH.
    ENDIF.
    IF sy-subrc = 0.
      gs_datalv-kbetr = ls_konv-kbetr.
      gs_datalv-waers = ls_konv-waers.
      gs_datalv-kpein = ls_konv-kpein.
      gs_datalv-kmein = ls_konv-kmein.
      gs_datalv-kwert = ls_konv-kwert.
    ELSE.
    ENDIF.

    CLEAR ls_konv.
    READ TABLE lt_konv INTO ls_konv WITH KEY knumv = ls_vbap-knumv
                                             kposn = ls_vbap-posnr
                                             kschl = 'MWSI' BINARY SEARCH.
    IF sy-subrc = 0 AND ls_konv-kbetr IS NOT INITIAL.
      CLEAR lv_erts.
      lv_erts = ls_konv-kbetr / 10.
      CONCATENATE lv_erts '%' INTO gs_datalv-mwets.
      CONDENSE gs_datalv-mwets.
    ELSE.
    ENDIF.

    CLEAR ls_kna1.
    READ TABLE lt_kna1 INTO ls_kna1 WITH KEY kunnr = ls_vbap-kunnr BINARY SEARCH.
    gs_datalv-name1 = ls_kna1-name1.

    CLEAR ls_kna1.
    READ TABLE lt_kna1 INTO ls_kna1 WITH KEY kunnr = ls_vbap-kunnr1 BINARY SEARCH.
    IF sy-subrc = 0.
      gs_datalv-name2 = ls_kna1-name1.
    ENDIF.

    CLEAR ls_vbpa.
    READ TABLE lt_vbpa INTO ls_vbpa WITH KEY vbeln = ls_vbap-vbeln BINARY SEARCH.
    gs_datalv-pernr = ls_vbpa-pernr.

    LOOP AT lt_vbfa INTO ls_vbfa WHERE vbelv = ls_vbap-vbeln
                                 AND   posnv = ls_vbap-posnr.

      ls_vbfa-rfmng = ls_vbfa-rfmng / ( ls_vbap-umvkz / ls_vbap-umvkn ).

      CASE ls_vbfa-vbtyp_n.
        WHEN 'J' OR 'T'.
          gs_datalv-lfimg   = gs_datalv-lfimg   + ls_vbfa-rfmng.
        WHEN 'R'.
          gs_datalv-lfimg_g = gs_datalv-lfimg_g + ls_vbfa-rfmng.
          IF gs_datalv-kwmeng > 0.
            gs_datalv-netwr_g = gs_datalv-netwr_g
                              + ls_vbfa-rfmng
                              * gs_datalv-kwert
                              / gs_datalv-kwmeng.
          ENDIF.
        WHEN 'h'.
          gs_datalv-lfimg_g = gs_datalv-lfimg_g - ls_vbfa-rfmng.
          IF gs_datalv-kwmeng > 0.
            gs_datalv-netwr_g = gs_datalv-netwr_g
                              - ls_vbfa-rfmng
                              * gs_datalv-kwert
                              / gs_datalv-kwmeng.
          ENDIF.
        WHEN 'M' OR 'O'.
          gs_datalv-fkimg   = gs_datalv-fkimg   + ls_vbfa-rfmng.
          IF gs_datalv-kwmeng > 0.
            gs_datalv-netwr_f = gs_datalv-netwr_f
                              + ls_vbfa-rfmng
                              * gs_datalv-kwert
                              / gs_datalv-kwmeng.
          ENDIF.
        WHEN 'N' OR 'S'.
          gs_datalv-fkimg   = gs_datalv-fkimg   - ls_vbfa-rfmng.
          IF gs_datalv-kwmeng > 0.
            gs_datalv-netwr_f = gs_datalv-netwr_f
                              - ls_vbfa-rfmng
                              * gs_datalv-kwert
                              / gs_datalv-kwmeng.
          ENDIF.
      ENDCASE.

    ENDLOOP.

    gs_datalv-lfimg   = gs_datalv-lfimg  - gs_datalv-lfimg_g.
    gs_datalv-lfimg_w = gs_datalv-kwmeng - gs_datalv-lfimg_g.

    IF gs_datalv-vkbur IS INITIAL.
      gs_datalv-vkbur = gs_datalv-vkgrp.
    ELSE.
    ENDIF.

    IF gs_datalv-vkgrp IS INITIAL.
      gs_datalv-vkgrp = gs_datalv-vkbur.
    ELSE.
    ENDIF.

    APPEND gs_datalv TO gt_datalv.
  ENDLOOP.

ENDFORM.

FORM sub_alv_data.

  DATA: lt_alv_filed    TYPE lvc_s_fcat,
        lt_alv_filedcat TYPE lvc_t_fcat,
        gs_filedcat     TYPE lvc_s_fcat,
        lt_layout       TYPE lvc_s_layo,
        lv_pgm          TYPE sy-repid,
        ls_sort         TYPE lvc_s_sort,
        lt_sort         TYPE TABLE OF lvc_s_sort..

  CLEAR lt_alv_filedcat.
  lv_pgm = sy-repid.

  DEFINE m_fieldcat.
    lt_alv_filed-fieldname = &1.
    lt_alv_filed-coltext   = &2.
    lt_alv_filed-REF_TABLE = &3.
    lt_alv_filed-REF_FIELD = &4.
    append lt_alv_filed to lt_alv_filedcat.
  END-OF-DEFINITION.

  m_fieldcat 'ERDAT'   text-z08 '' ''.
  m_fieldcat 'AUART'   text-z11 '' ''.
  m_fieldcat 'BNAME'   text-z14 '' ''.
  m_fieldcat 'BSTKD'   text-z40 '' ''.
  m_fieldcat 'VBELN'   text-z01 'VBAP' 'VBELN'.
  m_fieldcat 'KUNNR'   text-z27 'VBAK' 'KUNNR'.
  m_fieldcat 'NAME1'   text-z28 '' ''.
  m_fieldcat 'KUNNR1'   text-z41 'VBAK' 'KUNNR'.
  m_fieldcat 'NAME2'   text-z42 '' ''.
  m_fieldcat 'POSNR'   text-z02 'VBAP' 'POSNR'.
  m_fieldcat 'MATNR'   text-z03 'VBAP' 'MATNR'.
  m_fieldcat 'ARKTX'   text-z04 '' ''.
  m_fieldcat 'KWMENG'  text-z05 '' ''.
  m_fieldcat 'VRKME'   text-z06 'VBAP' 'VRKME'.
  m_fieldcat 'KBETR'   text-z16 '' ''.
  m_fieldcat 'KPEIN'   text-z17 '' ''.
  m_fieldcat 'KMEIN'   text-z23 'KONV' 'KMEIN'.
  m_fieldcat 'KWERT'   text-z24 '' ''.
  m_fieldcat 'EDATU'   text-z31 '' ''.
  m_fieldcat 'BUDAT'   text-z36 '' ''.
  m_fieldcat 'LFIMG_G' text-z20 '' ''.
  m_fieldcat 'NETWR_G' text-z32 '' ''.
  m_fieldcat 'LFIMG_W' text-z33 '' ''.
  m_fieldcat 'LFIMG'   text-z19 '' ''.
  m_fieldcat 'WAERS'   text-z22 '' ''.
  m_fieldcat 'WAERK'   text-z18 '' ''.
  m_fieldcat 'FKIMG'   text-z21 '' ''.
  m_fieldcat 'NETWR_F' text-z34 '' ''.
  m_fieldcat 'MWETS'   text-z35 '' ''.
  m_fieldcat 'BUKRS'   text-z15 '' ''.
  m_fieldcat 'VKORG'   text-z12 '' ''.
  m_fieldcat 'VTWEG'   text-z13 '' ''.
  m_fieldcat 'VKBUR'   text-z25 '' ''.
  m_fieldcat 'VKGRP'   text-z26 '' ''.
  m_fieldcat 'PERNR'   text-z29 '' ''.
  m_fieldcat 'WERKS'   text-z07 '' ''.
  m_fieldcat 'ERNAM'   text-z09 '' ''.
  m_fieldcat 'ABGRU'   text-z10 '' ''.

  "  m_fieldcat 'PSPNR'   text-z30 'PRPS' 'PSPNR'.

  lt_layout-cwidth_opt = 'X'.


  "根据TC屏蔽字段显示内容. liangqihua
  IF  sy-tcode EQ 'ZSDN006A'.
    LOOP AT lt_alv_filedcat INTO gs_filedcat .
      gs_filedcat-no_out = ''.


      IF gs_filedcat-fieldname = 'KBETR'
        OR gs_filedcat-fieldname = 'KPEIN'
        OR gs_filedcat-fieldname = 'KWERT'
        OR  gs_filedcat-fieldname ='NETWR_G'
        OR  gs_filedcat-fieldname ='WAERS'
        OR  gs_filedcat-fieldname ='WAERK'
        OR  gs_filedcat-fieldname ='WAERK'
        OR  gs_filedcat-fieldname ='NETWR_F'
        OR  gs_filedcat-fieldname ='NETWR_F'
         .
        gs_filedcat-tech = 'X'.
      ENDIF.
      MODIFY lt_alv_filedcat FROM gs_filedcat .

    ENDLOOP.

  ENDIF.


  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY_LVC'
    EXPORTING
      it_fieldcat_lvc    = lt_alv_filedcat
      is_layout_lvc      = lt_layout
      i_save             = 'A'
      i_callback_program = lv_pgm
    TABLES
      t_outtab           = gt_datalv[].
ENDFORM.

----------------------------------------------------------------------------------
Extracted by Direct Download Enterprise version 1.3 - E.G.Mellodew. 1998-2004 UK. Sap Release 740
